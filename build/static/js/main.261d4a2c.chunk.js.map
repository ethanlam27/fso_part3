{"version":3,"sources":["components/Numbers.js","components/AddPersonForm.js","components/FilterSearch.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Numbers","headerTitle","persons","handleDelete","map","person","key","id","name","number","onClick","type","AddPersonForm","props","newName","updateNameInput","newNumber","updateNumberInput","handleAdd","value","onChange","FilterSearch","search","updateSearchInput","baseURL","axios","get","then","response","data","newPerson","post","put","delete","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","api_key","process","REACT_APP_API_KEY","console","log","App","useState","setPersons","setNewName","setNewNumber","setSearch","notification","setNotification","useEffect","personServices","personsFromJsonServer","askToUpdateNumber","window","confirm","personToUpdate","find","p","indexToUpdate","findIndex","copyPerson","copyOfPersons","copyPersons","splice","setNotificationHelper","catch","error","resetInputFields","isPersonExistAlready","addCurPersonToPhonebook","concat","timeout","setTimeout","event","preventDefault","updatedSearchText","target","filter","toLowerCase","includes","indexToDel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.261d4a2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Numbers = ({ headerTitle, persons, handleDelete }) => {\r\n    return (\r\n      <div>\r\n        <h2>{headerTitle}</h2>\r\n  \r\n        {persons.map(person => {\r\n          return (\r\n            <div key={person.id}>\r\n              <span>{person.name} {person.number}</span>\r\n              <button onClick={handleDelete(person.id)} type='button'>delete</button>\r\n              <br></br>\r\n            </div>\r\n          )\r\n          \r\n        }\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Numbers","import React from 'react'\r\n\r\n\r\nconst AddPersonForm = (props) => {\r\n    const {\r\n        headerTitle,\r\n        newName, updateNameInput,\r\n        newNumber, updateNumberInput,\r\n        handleAdd\r\n    } = props\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>{headerTitle}</h2>\r\n\r\n            <form>\r\n                <div>\r\n                    name: <input value={newName} onChange={updateNameInput} />\r\n                </div>\r\n\r\n                <div>\r\n                    number: <input value={newNumber} onChange={updateNumberInput} />\r\n                </div>\r\n\r\n                <div>\r\n                    <button onClick={handleAdd} type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPersonForm","import React from 'react'\r\n\r\n\r\n\r\nconst FilterSearch = (props) => {\r\n    const {\r\n        search,\r\n        updateSearchInput\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            filter names: <input value={search} onChange={updateSearchInput} type=\"text\" />  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FilterSearch","import axios from 'axios'\r\n\r\nconst baseURL = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseURL)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newPerson) => {\r\n    const request = axios.post(baseURL, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newPerson) => {\r\n    const request = axios.put(`${baseURL}/${id}`, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id) => {\r\n    const request = axios.delete(`${baseURL}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, del}","import React from 'react'\r\n\r\n\r\nconst Notification = ({type, message}) => {\r\n    const successStyle = {\r\n        color: 'green',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n\r\n    if (type === null) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <div style={(\r\n                type === 'success' ? \r\n                successStyle : \r\n                errorStyle)}>\r\n\r\n                {message}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Numbers from './components/Numbers'\nimport AddPersonForm from './components/AddPersonForm'\nimport FilterSearch from './components/FilterSearch'\nimport personServices from './services/persons'\nimport Notification from './components/Notification'\n\nconst api_key = process.env.REACT_APP_API_KEY\nconsole.log(api_key)\n// variable api_key has now the value set in startup\n\nconst App = () => {\n  // STATE\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [notification, setNotification] = useState({\n    type: null,\n    message: null\n  })\n\n  const effectHook = () => {\n    console.log('effect start')\n    personServices\n      .getAll()\n      .then(data => {\n        const personsFromJsonServer = data\n        console.log(personsFromJsonServer)\n        setPersons(personsFromJsonServer)\n      })\n  }\n\n  // empty array -> only call effect after first render\n  useEffect(effectHook, [])\n\n\n  // EVENT HANDLERS\n\n  const updateNameInput = (event) => {\n    event.preventDefault()\n\n    setNewName(event.target.value)\n  }\n\n  const updateNumberInput = (event) => {\n    event.preventDefault()\n\n    setNewNumber(event.target.value)\n  }\n\n  const handleAdd = (event) => {\n    event.preventDefault()\n\n    isPersonExistAlready(newName)\n      ? askToUpdateNumber()\n      // update persons state\n      : addCurPersonToPhonebook()\n  }\n\n  // Helper Functions\n\n  const askToUpdateNumber = () => {\n    const isOK = window.confirm(`\"${newName}\" exists in the phonebook already. Would you like to replace the old number with a new one?`)\n    if (isOK) {\n      const personToUpdate = persons.find( p => p.name === newName)\n      const indexToUpdate = persons.findIndex(person => personToUpdate === person)\n      const copyPerson = {...personToUpdate, number: newNumber}\n\n      personServices\n        .update(personToUpdate.id, copyPerson)\n        .then( data => {\n          const copyOfPersons = copyPersons()\n          copyOfPersons.splice(indexToUpdate, 1, data)\n          setPersons(copyOfPersons)\n        })\n        .then( data => {\n          setNotificationHelper('success', `${newName}'s number was updated`, 5000)\n        })\n        .catch( error => {\n          setNotificationHelper('error', `${newName}'s number was not updated`, 5000)\n        })\n      resetInputFields()\n    }\n  }\n\n  const isPersonExistAlready = (name) => {\n    return (persons.findIndex((person) => person.name === name) >= 0)\n  }\n\n  const addCurPersonToPhonebook = () => {\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    // create new person on server\n    personServices\n      .create(newPerson)\n      .then( data => {\n        // this is necessary to get the returned object from the server which has the generated id\n        setPersons(persons.concat(data))\n      })\n      .then( data => {\n        setNotificationHelper('success', `Added ${newName}`, 5000)\n      })\n      .catch( error => {\n        setNotificationHelper('error', `${newName} was not added`, 5000)\n      })\n    // clear input fields\n    resetInputFields()\n  }\n\n  // set notification for type, message, timeout\n  const setNotificationHelper = (type, message, timeout) => {\n    setNotification(\n      {\n      type: type,\n      message: message\n      }\n    )\n    setTimeout(() => {\n      setNotification({\n        type: null,\n        message: null})\n    }, timeout)\n  }\n\n  const resetInputFields = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const updateSearchInput = (event) => {\n    event.preventDefault()\n\n    const updatedSearchText = event.target.value\n    setSearch(updatedSearchText)\n  }\n\n  // filters by searching for names containing the search phrase\n  /* note: all strings contain the empty string\n                so we can pass in the filteredPersons since an empty\n                search bar will return all persons */\n  const filteredPersons = () => {\n    return persons.filter((person) => person.name.toLowerCase().includes(search.toLowerCase()))\n  }\n\n  const handleDelete = (id) => {\n    return (event) => {\n      event.preventDefault()\n\n      // find index of person to delete\n      const indexToDel = persons.findIndex(person => {\n        return person.id === id\n      })\n\n      personServices.del(id)\n\n      const copyOfPersons = copyPersons()\n      copyOfPersons.splice(indexToDel, 1)\n      setPersons(copyOfPersons)\n    }\n  }\n\n  // deep copy\n  const copyPersons = () => {\n    return persons.map( person => {\n      return {\n        name: person.name,\n        number: person.number,\n        id: person.id\n      }\n    }) \n  }\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n\n      <Notification type={notification.type} message={notification.message}/>\n\n      <FilterSearch \n        search={search}\n        updateSearchInput={updateSearchInput}\n      />\n\n      <AddPersonForm \n        headerTitle='Add New Person' \n        newName={newName}\n        updateNameInput={updateNameInput}\n        newNumber={newNumber}\n        updateNumberInput={updateNumberInput}\n        handleAdd={handleAdd}\n         />\n\n      {/* note: all strings contain the empty string\n                so we can pass in the filteredPersons since an empty\n                search bar will return all persons */}\n      <Numbers \n        headerTitle='Numbers' \n        persons={filteredPersons()} \n        handleDelete={handleDelete} \n        />\n    </>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}